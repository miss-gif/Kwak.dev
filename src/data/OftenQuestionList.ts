import { Question } from "@/types/question";

export const OftenQuestionList: Question[] = [
  // 자기소개 및 배경
  {
    question: "현재 주소지와 언제부터 출근이 가능한가요?",
    answer:
      "현재 주소지는 대구입니다. <br/> 입사 확정 후, 출근이 용이한 지역에서 자취를 시작할 계획입니다. <br/> 입사 확정일로부터 1주일 간에 이사를 완료하고 출근이 가능할 것으로 생각됩니다. <br/> 1주일의 기간은 서울, 경기에 거주 중인 지인들의 경험을 바탕으로 설정한 예상 기간입니다.",
    frequency: 4,
    category: "자기소개 및 배경",
  },
  {
    question: "희망 연봉은 얼마이며, 경력은 어떻게 되나요?",
    answer:
      "희망 연봉은 3,000만 원입니다. <br/> 경력은 없지만, Node.js 기반의 풀스택 개발자 교육 과정(6개월)과 <br/> React 기반의 프론트엔드 개발자 과정(6개월)을 수료하며 기술을 익혔습니다. <br/> 또한, 1년 이상의 독학 기간 동안 다양한 프로젝트를 진행하면서 문제 해결 능력을 키웠습니다. <br/> 제 작업 내역은 깃허브와 개인 블로그인 Kwak.dev에서 확인하실 수 있습니다.",
    frequency: 4,
    category: "자기소개 및 배경",
  },
  {
    question: "본인의 공백기에 대해 설명해주세요.",
    answer:
      "대학교 재학 중 군 휴학과 워킹홀리데이 1년, 그리고 학비를 위한 아르바이트 경험이 있습니다. <br/> 일본 워킹홀리데이에서 다양한 문화와 환경에 적응하며 빠르게 변화하는 상황에 유연하게 대처하는 능력을 키웠고, <br/> 이는 새로운 업무 환경에서도 적응하는 데 큰 도움이 되었습니다. <br/> 이후 독학과 학원 교육을 통해 웹 개발 지식을 체계적으로 쌓으며, 특히 협업 능력과 문제 해결 능력을 강화했습니다. <br/> 이러한 경험은 제가 웹 개발자로서 빠르게 성장하는 데 중요한 밑거름이 되었습니다.",
    frequency: 3,
    category: "자기소개 및 배경",
  },
  {
    question: "다른 사람이 평가하기에 본인은 어떤 사람인가요?",
    answer:
      "협업 과정에서 체계적이고 명확한 평가를 받은 적은 없지만, 상황에 맞게 행동하려고 노력합니다. <br/> 팀원일 때는 자유롭게 의견을 내며, 그룹의 분위기를 살펴 내용을 수용했습니다. <br/> 의견이 없다면 제 의견을 제시하고, 의견이 있으면 그것을 듣고 새로운 의견을 내거나 동조하였습니다. <br/> 프로젝트 리더 일 때는 더 적극적으로 의견을 내고자 했습니다. 책임감을 가지고 프로젝트 진행 상황을 더 꼼꼼히 체크하고 확인하는 데 신경을 썼습니다.",
    frequency: 3,
    category: "자기소개 및 배경",
  },
  {
    question: "취업에 조급한가요?",
    answer:
      "개발자로서 준비 기간이 길었던 만큼, 이제는 취업을 해야겠다는 마음으로 조급함을 느끼고 있습니다. <br/> 다만, 단순히 어디든 취업만 시켜주면 열심히 하겠습니다는 생각은 아니며, <br/> 제 목표와 맞는 회사를 찾고자 하는 마음이 있기 때문에 과도하게 조급하진 않다고 생각합니다.",
    frequency: 3,
    category: "자기소개 및 배경",
  },

  // 프로젝트 및 경험
  {
    question: "협업 프로젝트 진행 중 힘들었던 점과 이를 해결한 방법은 무엇인가요?",
    answer:
      "프로젝트에서 일정 조율과 기능 구현, 그리고 소통에서 어려움을 겪었습니다. 초기 기획 단계에서 기능 정의가 충분히 이루어지지 않아 일정이 지연되었지만, 이를 해결하기 위해 팀원들과 매일 문제를 공유하고 논의하는 시간을 가졌습니다. 또한 우선순위를 재설정하고 각 작업 내용을 명확히 정의하며 팀워크를 강화해 프로젝트를 성공적으로 마무리했습니다.",
    frequency: 1,
    category: "프로젝트 및 경험",
  },
  {
    question: "소통에서 문제가 발생했을 때 어떻게 해결하셨나요?",
    answer:
      "의견 차이가 있었지만, 자유롭게 토론하며 서로의 입장을 공유했습니다. 특히 일정과 기능 구현 가능성에 대한 의견 차이를 해결하기 위해, 우선순위를 재설정하고 각자의 역할을 명확히 정의했습니다. 이러한 노력으로 소통의 단절을 방지하고 협력을 강화할 수 있었습니다.",
    frequency: 2,
    category: "프로젝트 및 경험",
  },
  {
    question: "현재의 기술적 한계나 부족한 점은 무엇인가요?",
    answer:
      "현재의 부족한 점은 경험 부족입니다. 문제 해결 능력은 어느 정도 갖추었으나, 이를 보다 성숙하고 효과적인 방법으로 해결하는 데 있어 경험이 부족한 것 같습니다. 이를 보완하기 위해 다양한 프로젝트를 진행하고, 다양한 문제를 접하며 경험을 쌓고 있습니다.",
    frequency: 3,
    category: "프로젝트 및 경험",
  },
  {
    category: "기술과 경험",
    question: "지금까지 개발하면서 가장 기억에 남는 경험은 무엇인가요?",
    answer:
      "가장 기억에 남는 경험은 '주문이요'라는 음식 주문 플랫폼 프로젝트입니다. 이 프로젝트에서 저는 프론트엔드 리더로서 팀을 이끌었고, 처음에는 과한 열정과 책임감으로 모든 문제를 해결하려 했습니다. 그 결과, 의사결정과 코드 작성에서 미숙한 부분이 있었고, 그 점에 대한 아쉬움이 남았습니다. 그러나 이 경험을 통해 리더로서의 역할을 더 잘 이해하게 되었고, 협업과 의사소통의 중요성을 절실히 깨달았습니다. 또한, 더 나은 결정을 내리기 위해서는 팀원들의 의견을 적극적으로 반영하고, 각자의 역할을 존중하는 것이 중요하다는 교훈을 얻었습니다. 앞으로는 더 경험을 쌓아 나가며, 더욱 성숙한 개발자가 되기 위해 노력할 것입니다.",
    frequency: 3,
  },

  // 개인적인 특성 및 문제 해결
  {
    question: "스트레스를 어떻게 해소하시나요?",
    answer:
      "웹소설을 읽으며 창의적인 영감을 얻고, 운동을 통해 신체적인 스트레스를 해소합니다. 이러한 활동들은 집중력을 회복시켜 업무에 더 몰입할 수 있도록 도와줍니다.",
    frequency: 1,
    category: "개인적인 특성 및 문제 해결",
  },
  {
    question: "선호하는 동료의 유형은 무엇인가요?",
    answer:
      "저는 서로의 의견을 존중하고, 협력을 통해 함께 성장할 수 있는 동료를 찾고 있습니다. 다양한 배경과 생각을 가진 사람들과 함께 일하며, 팀으로서 목표를 달성하고 싶습니다. 특히, 자신의 의견을 자유롭게 개진하고 다른 사람의 의견을 경청하며, 팀의 목표를 위해 협력하는 사람과 함께 일하고 싶습니다.",
    frequency: 1,
    category: "개인적인 특성 및 문제 해결",
  },
  {
    question: "피하고 싶은 동료의 유형은 무엇인가요?",
    answer:
      "소통을 피하는 사람, 주장이 너무 강한 사람, 개인을 중시하는 사람, 그리고 발전이 없는 사람은 피하고 싶습니다.",
    frequency: 1,
    category: "개인적인 특성 및 문제 해결",
  },

  // 팀워크 및 협업
  {
    question: "회사를 선택할 때 본인만의 기준은 무엇인가요?",
    answer:
      "회사를 선택할 때는 개발자로서 성장할 수 있는 지원과 도전적인 환경을 중요하게 생각합니다. 구체적으로는, 코드 리뷰와 같은 학습 기회를 통해 높은 품질의 코드를 작성할 수 있는 문화, 자유롭게 의견을 나누고 피드백을 받을 수 있는 개방적인 분위기, 그리고 실수를 두려워하지 않고 도전할 수 있는 환경이 중요합니다.",
    frequency: 2,
    category: "팀워크 및 협업",
  },
  {
    category: "팀워크와 협업",
    question: "본인이 생각하는 좋은 팀워크란 무엇인가요?",
    answer:
      "본인이 생각하는 좋은 팀워크는 자유로운 의사소통이 이루어지는 팀입니다. 팀원들이 서로의 의견을 자유롭게 표현하고, 이를 존중하며 협력할 수 있는 환경이 중요합니다. 의견을 나누고 피드백을 주고받으며 서로의 강점을 살리고, 함께 성장할 수 있는 팀워크가 가장 이상적이라고 생각합니다.",
    frequency: 3,
  },
  {
    category: "팀워크와 협업",
    question: "본인이 팀에서 맡고 싶은 역할은 무엇인가요?",
    answer:
      "저는 맡은 역할을 충실히 수행하며, 팀에 어려움이 발생했을 때 도움을 줄 수 있는 동료가 되고 싶습니다. 팀 내에서의 책임을 다하고, 문제가 생기면 적극적으로 해결 방안을 제시하며 협력하는 역할을 맡고 싶습니다. 모든 팀원이 서로를 지원하며 함께 성장할 수 있는 환경을 만드는 데 기여하고자 합니다.",
    frequency: 3,
  },

  // 자기 발전 및 목표
  {
    question: "현재의 생활 루틴은 무엇인가요?",
    answer:
      "개인 프로젝트를 개선하거나 새로운 기술을 익히는 데 대부분의 시간을 투자하고 있습니다. 이를 통해 지속적으로 기술을 확장하고, 문제 해결 능력을 키우며 꾸준히 성장하고 있습니다.",
    frequency: 1,
    category: "자기 발전 및 목표",
  },
  {
    question: "꾸준함을 유지하는 원동력은 무엇인가요?",
    answer:
      "별다른 이유를 찾기보다는 일단 시작하는 것에서 꾸준함을 유지합니다. 작은 성과들이 자연스러운 동기부여가 되어 꾸준히 이어갈 수 있습니다.",
    frequency: 1,
    category: "자기 발전 및 목표",
  },
  {
    question: "자신의 강점과 약점은 무엇인가요?",
    answer:
      "개발자로서의 강점은 향상심을 가지고 있다는 점입니다. 새로운 기술을 익히고, 계속해서 성장하려는 의지가 강합니다. 반면, 약점은 아직 전공자만큼 깊은 CS 지식을 갖추지 못한 점입니다. 이를 극복하기 위해 꾸준히 학습하고, 부족한 부분을 채워 나가고자 노력하고 있습니다.",
    frequency: 3,
    category: "자기 발전 및 목표",
  },
  {
    question: "가장 중요하게 생각하는 개발자의 역량은 무엇인가요?",
    answer:
      "개발자에게 가장 중요한 역량은 향상심이라고 생각합니다. 기술은 빠르게 변화하므로 끊임없이 배우고 성장하려는 자세가 필요합니다. 새로운 기술을 익히고, 문제를 해결하며 자신을 끊임없이 발전시키는 것이 개발자로서 중요한 능력입니다.",
    frequency: 3,
    category: "자기 발전 및 목표",
  },
  {
    question: "자신이 생각하는 이상적인 개발자란 어떤 사람인가요?",
    answer:
      "주어진 조건과 환경 안에서 최선의 결과를 내는 사람이 이상적인 개발자라고 생각합니다. 제한된 리소스와 조건 속에서도 문제를 해결하려는 태도와 효율적인 방법을 찾는 노력이 중요하다고 생각하기 때문입니다.",
    frequency: 3,
    category: "자기 발전 및 목표",
  },
  {
    question: "본인이 생각하는 개발자로서의 성장 방향은 무엇인가요?",
    answer:
      "현재로서는 구체적인 성장 방향을 정하지 않았지만, 사회적 문제를 인지하고 이를 개발자로서 해결할 수 있는 기회를 찾는 것이 제 목표입니다. 기술을 활용하여 사회에 긍정적인 영향을 미칠 수 있는 방향으로 발전하고자 합니다.",
    frequency: 3,
    category: "자기 발전 및 목표",
  },
  {
    category: "성장과 목표",
    question: "향후 5년 후, 본인은 어떤 개발자가 되어 있을 것 같나요?",
    answer:
      "명확한 목표는 아직 정하지 않았지만, 믿고 신뢰할 수 있는 개발자가 되고 싶습니다. 지속적인 학습과 성장을 통해 동료들로부터 신뢰받고, 문제 해결 능력과 협업 능력을 갖춘 개발자가 되기를 원합니다.",
    frequency: 3,
  },
  {
    category: "성장과 목표",
    question: "2022년 Node.js 기반의 풀스택 개발자 교육 과정(6개월) 수료 후 바로 취업하지 않은 이유?",
    answer:
      "교육 과정을 수료한 후, 개발자로서 경쟁력을 갖추기 위해 부족한 부분을 스스로 보완하고자 노력했습니다. 이 과정에서 부족함을 채우려 할수록 또 다른 부족함을 깨닫는 굴레에 빠지기도 했고, 도달할 수 없는 목표를 좇으며 방황했던 시간도 있었습니다. 하지만 이러한 실패를 통해 제 한계를 직시할 수 있었고, 이를 극복하기 위해 끊임없이 성장하려는 노력이 지금의 저를 만들었다고 생각합니다.",
    frequency: 3,
  },

  // 개발 관련 기술
  {
    question: "React 프로젝트에서 성능 최적화를 위해 어떤 방법을 사용했나요?",
    answer:
      "Lighthouse와 React Profiler를 사용하여 성능 문제를 진단한 후, 코드 분할, 메모이제이션, 불필요한 렌더링을 최소화하는 최적화 방법을 적용했습니다. 이를 통해 페이지 로딩 속도를 개선하고, 리렌더링을 최소화하여 성능을 크게 향상시켰습니다.",
    frequency: 2,
    category: "개발 관련 기술",
  },
  {
    question: "현재 사용하고 있는 개발 도구나 프레임워크는 무엇인가요?",
    answer:
      "현재 주로 사용하고 있는 개발 도구는 Vite, TypeScript, React, 그리고 Tailwind CSS입니다. Vite는 빠른 빌드 속도와 효율적인 핫 리로딩을 제공해 개발 속도를 크게 향상시킵니다. TypeScript는 정적 타입 검사를 통해 코드의 안정성과 가독성을 높이고 있습니다. React는 컴포넌트 기반 아키텍처를 통해 재사용성을 극대화하고, Tailwind CSS는 유틸리티 클래스 기반으로 빠르게 스타일을 적용할 수 있어 생산성을 높이고 있습니다.",
    frequency: 3,
    category: "개발 관련 기술",
  },

  // 기술 동향 및 학습
  {
    question: "최신 기술 동향을 어떻게 따라가고 있나요?",
    answer:
      "기술 블로그와 개발자 커뮤니티를 통해 최신 트렌드를 지속적으로 파악하고, 이를 실제 프로젝트에 적용하여 뒤처지지 않도록 노력하고 있습니다.",
    frequency: 3,
    category: "기술 동향 및 학습",
  },

  // 가치와 철학
  {
    category: "가치와 철학",
    question: "개발을 하면서 가장 중요하게 생각하는 가치는 무엇인가요?",
    answer:
      "개발에서 가장 중요하게 생각하는 가치는 '사용자 우선'입니다. 모든 개발은 사용자가 편리하게 이용할 수 있도록 이루어져야 하며, 만약 사용자가 불편을 겪는다면 그 개발은 실패한 것이라고 생각합니다. 사용자 경험을 최우선으로 고려하며, 그에 맞는 기능과 UI를 설계하고 개발하는 것이 중요하다고 믿습니다.",
    frequency: 3,
  },
  {
    category: "가치와 철학",
    question: "프로그래밍에서 가장 중요하다고 생각하는 점은 무엇인가요?",
    answer:
      "프로그래밍에서 가장 중요하다고 생각하는 점은 다른 사람이 코드를 봐도 쉽게 로직을 이해할 수 있도록 작성하는 것입니다. 이는 협업 환경에서 코드의 유지보수와 확장성을 높이는 데 필수적입니다. 코드의 가독성을 높이기 위해 변수명, 함수명, 주석 등을 명확하게 작성하고, 일관된 스타일을 유지하는 것을 중요하게 생각합니다.",
    frequency: 3,
  },
].sort((a, b) => b.frequency - a.frequency);
